<html>
<head>
  <title>INFO 4310 - Feb-21</title>
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <style>
  
        .gridlines line {
          stroke: #bbb;
        }

        .gridlines .domain {
          stroke: none;
        }
        
        rect.handle {
            display: none;
        }
        rect.overlay {
            display: none;
        }
  
  </style>
  
</head>
<body>
  <div class="container larger">
    <h3>Notes for February 21</h3><p>
      Today we're going to attempt to make a minimap to help users navigate as they explore a dataset in detail through pan and zoom. We'll make use of d3.zoom and d3.brush to power the interaction.
    </p>
    <p>
      D3.js version 6 looks pretty bug-free, so we'll be updating to it. See new import on this file. There is a <a href="https://observablehq.com/@d3/d3v6-migration-guide">migration guide</a> to highlight the changes.
    </p>
    <p>
      There will be a few items pending after this demo. First, one probably should also enable click interaction on the minimap so that analysts can "jump" to a new place. Second, it may be more efficient to draw the minimap in canvas form so that you can conserve browser resources. Since you don't need to update those contents as frequently or keep as high fidelity, canvas is a good choice. Third, the minimap in the corner leaves some free space below it for some additional details, perhaps through mouseovers. You might try adding a foreignObject tag within the SVG and putting a data table there to get some practice.
    </p>
    
    
    <h5>HTML for today:</h5>
    
    
      <svg id="scatterplot" height="700" width="900" style="background: #fff; margin-top:50px" >
        <g id="plot" height="700" width="700"></g>
        <g id="minimap" width="200" height="200" transform="translate(699,1)">
          <rect x="0" y="0" width="200" height="200" stroke="black" stroke-width="1" fill="white" opacity="1"/>
        </g>
      </svg>
      
    
    <h5>Code for today:</h5>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
    </pre>
    
    
    
    
    
    <script id="notes1">
    
    const plot = d3.select("svg g#plot");
    const width = plot.attr("width");
    const height = plot.attr("height");
    const margin = { top: 5, right: 5, bottom: 35, left:35};
    const chartWidth = width - margin.left - margin.right;
    const chartHeight = height - margin.top - margin.bottom;
    const yAxisArea = plot.append("g")
                          .attr("transform","translate("+(margin.left-2)+","+margin.top+")");
    const xAxisArea = plot.append("g")
                          .attr("transform","translate("+margin.left+","+(chartHeight+2+margin.top)+")");
    const chartArea = plot.append("g").attr("transform","translate("+margin.left+","+margin.top+")");
    
    // To make sure that plot contents only show up within the chartArea, we use a clipPath
    // region that is "filled" within the <clipPath> will stay, pixels outside of it will be deleted
    plot.append("defs").append("clipPath")
                      .attr("id","chartClip")
                      .append("rect").attr("x",0)
                                     .attr("y",0)
                                     .attr("width",chartWidth)
                                     .attr("height",chartHeight);

    chartArea.attr("clip-path","url(#chartClip)");

    const drawPlot = async () => {
      
      const inputData = await d3.csv("../datasets/board-games-simplified.csv", d3.autoType )
      
      // !! subsample the data -- at most 10,106 points
      const N = 1500;
      let data = [];
      for (let i=0; i<N; i++) {
          data.push(inputData[i]);
      }
      

      const xScale = d3.scaleLinear().domain(d3.extent(data, d => d['average_rating']))
                                     .range([10, chartWidth-10]);
      const yScale = d3.scaleSymlog().domain(d3.extent(data, d => d['users_rated']))
                                     .range([chartHeight-10, 10]);
      let yAxis = d3.axisLeft(yScale).ticks(6).tickFormat(d3.format(".0s")); 
      yAxisArea.append("g").attr("class", "y axis").call(yAxis);
      let xAxis = d3.axisBottom(xScale); 
      xAxisArea.append("g").attr("class", "x axis").call(xAxis);
      let yGridlines = d3.axisLeft(yScale).ticks(6).tickSize(-chartWidth).tickFormat("");
      yAxisArea.append("g").attr("class", "y gridlines").call(yGridlines);
      let xGridlines = d3.axisBottom(xScale).tickSize(-chartHeight).tickFormat("");
      xAxisArea.append("g").attr("class", "x gridlines").call(xGridlines);

      // create the circles
      let viewport = chartArea.append("g");
      let circles = viewport.selectAll("circle.point").data(data)
                            .join("circle").attr("class","point")
                            .attr("cx", d => xScale(d['average_rating']))
                            .attr("cy", d => yScale(d['users_rated']))
                            .attr("r", 6)
                            .attr("opacity", 0.8)
                            .attr("fill", "steelblue");


      // make an interactive "surface" at the top of the plot area
      chartArea.append("rect").attr("x",0).attr("y",0)
                         .attr("width",chartWidth).attr("height",chartHeight)
                         .attr("fill","none")
                         .style("pointer-events","all");
                         
      // 1. build a pan-zoom handler
      let zoomExtent = [[0,0],[chartWidth,chartHeight]];
      let translateExtent = [[-100,-100],[chartWidth+100,chartHeight+100]];
      var plotZoom = d3.zoom()
                       .extent(zoomExtent)
                       .translateExtent(translateExtent)
                       .scaleExtent([1,10])
                       .on("zoom", plotZoomed);                   
                         
      // then add the zoom handler
      chartArea.call(plotZoom);



      // composing the minimap
      // first, a teeny tiny version of the scatterplot
      const minimap = d3.select("svg g#minimap");
      const minimapMargin = { top: 4, right: 4, bottom: 4, left:4};
      const minimapWidth = minimap.attr("width") - minimapMargin.left - minimapMargin.right;
      const minimapHeight = minimap.attr("height") - minimapMargin.top - minimapMargin.bottom;
      const minimapArea = minimap.append("g")
                                 .attr("transform","translate("+minimapMargin.left+","+minimapMargin.top+")")
                                 .attr("opacity", 0.5);
      
      // 2. fill the minimap
                              
      // first trick - we're going to set our scales using the translate extents of the zoom handler instead of the data extents
      //   this will allow us to accommodate bigger zoom windows                         
      const minimapXScale = d3.scaleLinear().domain([xScale.invert(translateExtent[0][0]),
                                                     xScale.invert(translateExtent[1][0])])
                                     .range([0, minimapWidth]);
      const minimapYScale = d3.scaleSymlog().domain([yScale.invert(translateExtent[1][1]),   // min y value is at the lower right corner
                                                     yScale.invert(translateExtent[0][1])])
                                     .range([minimapHeight, 0]);
      
      let pointArea = minimapArea.append("g").attr("class","points")                       
      pointArea.selectAll("circle.point").data(data)
               .join("circle").attr("class","point")
               .attr("cx", d => minimapXScale(d['average_rating']))
               .attr("cy", d => minimapYScale(d['users_rated']))
               .attr("r", 3)
               .attr("opacity", 0.8)
               .attr("fill", "steelblue");


      // 3. add a brush
      //  NOTE: CSS at the top disables the handles and overlay drawing features of the brush
      let brushGroup = minimapArea.append("g").attr("class","brush");
      let brush = d3.brush()
          .extent([[0,0], [minimapWidth,minimapHeight]])
          //.on("start", startbrush)
          .on("brush", brushed)
          //.on("end", endbrush);
          
      brushGroup.call(brush)   
      
      
      
      // when the brush is moved, update the plotZoom so that the main view matches what is selected
      function brushed( {sourceEvent, selection} ) {
        
        // this will go into an infinite loop if you don't catch the things triggered by the zoom
        //  because plotZoomed calls brush.move which invokes brushed which calls plotZoom.transform which invokes plotZoomed...
        // sourceEvent is undefined when you cause an event function to trigger because of a programmatic call like brush.move
        // we break the infinite loop by detecting programmatic calls of brush.move and cancelling
        //  (these can only happen when brushed is called correctly, which calls plotZoomed, which called brushed with sourceEvent=undefined)
        if (sourceEvent === undefined) {
          return;
        }
        
        // to update the transform to wherever the brush has been moved, we need to figure out its current location
        // we will run the minimap scale function in reverse to find the data values for the corner provided by selection
        let corner = [minimapXScale.invert(selection[0][0]),minimapYScale.invert(selection[0][1])];
        
        // now we get the current transform for the plotZoom (we do this to figure out the current zoom level)
        // we will modify it so that it has the correct position on screen
        let transform = d3.zoomTransform(chartArea.node());     // .node is used because d3.zoomTransform expects a plain HTML object
                                                                // yes, this is weird, but it has to do with how sourceEvent usually includes
                                                                //  plain HTML objects and not d3 wrapped ones -- since most of what we do
                                                                //  is nested inside of event functions, d3 interaction events use plain HTML
        
        // since we know the data value of the brush's corner in the minimap, and we still have the original
        //  scales for the screen before it was zoomed in, we can figure out where the corner is using the
        //  coordinate system the circles live in (i.e. their actual cx and cy values compared to data)
        // we can program the transform to move the screen based on the minimap's corner
        // if the minimap brush has moved rightwards, we shift the transform with a negative x translate, sliding the circles leftwards
        //  (this is a weird intuition -- the window stays in the same place and your transform is moving the content around under it)
        // if the minimap brush has moved up and to the left, then we need to shift right (positive x) and down (positive y)
        //  (this only occurs when you move in the space between -100 and 0 we added to the minimap, which would give negative xScale values)
        
        // modify the transform
        //  we multiply by transform.k to account for the fact that things may be zoomed in
        //    (it's how the transform math works out for the way d3 organizes its transform, this may not always be the case)
        transform.x = -xScale(corner[0])*transform.k;
        transform.y = -yScale(corner[1])*transform.k;
        
        // finally, update it
        chartArea.call(plotZoom.transform, transform);
      }
      
      
      
      function plotZoomed( { transform } ) {
        
        viewport.attr("transform", transform);

        // update the scales on the axes/gridlines
        // rescale does not modify the source scale, it just returns a copy
        let txScale = transform.rescaleX(xScale);
        let tyScale = transform.rescaleY(yScale);
        xAxis.scale(txScale);
        yAxis.scale(tyScale);
        xGridlines.scale(txScale);
        yGridlines.scale(tyScale);

        // apply new scaled axes (no need for an animation .transition() since zoom triggers so many events)
        d3.select("g.y.axis").call(yAxis);
        d3.select("g.x.axis").call(xAxis);
        d3.select("g.y.gridlines").call(yGridlines);
        d3.select("g.x.gridlines").call(xGridlines);
        
        // adjust circle size too
        circles.attr("r", 6 / transform.k);
        
        // use the transformed scales to figure out our bounding box in data space
        let dataBounds = [[txScale.invert(0),tyScale.invert(0)],
                          [txScale.invert(chartWidth),tyScale.invert(chartHeight)]];
                          
        // then use the scale to find pixels for the min and max data values currently visible in the main view                  
        let minimapBounds = [[minimapXScale( dataBounds[0][0] ),
                              minimapYScale( dataBounds[0][1] )],
                             [minimapXScale( dataBounds[1][0] ),
                              minimapYScale( dataBounds[1][1] )]];
        // yes, you could do this all in one operation...

        brushGroup.call(brush.move, minimapBounds)
      }
      
      
      chartArea.call(plotZoom.transform, d3.zoomIdentity); // Executes plotZoomed() so that we can initiate the brush on screen
      
      // using .call to programmatically trigger interactions like on(brush) or on(zoom) is good practice if you have
      //  some fancy code running inside of those events to update the user interface
      // rather than copying in the update code and risking things breaking if you modify it later, just trigger the event
      //  so that whatever updates need to happen will work as expected
      // for zoom, you can update the .transform with zoomIdentity, as that's the value it has when it is initialized
      // for a brush, you can set a specific area or just use the zoomExtent and call .move with the extent

    }
    drawPlot();

      
    
    </script>
    
    
    
    
    
    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
    
    function sanitize(s) {
      return s.replace("<br>", "\\n")
              .replace(/&/g, "&amp;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;")
              .replace(/"/g, "&quot;")
              .replace(/'/g, "&#039;");
            }
      document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
      hljs.highlightAll();
    </script>    
    
  </div>
</body>
</html>
